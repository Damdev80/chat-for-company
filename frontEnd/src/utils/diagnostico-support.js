// Script de diagn√≥stico ESPEC√çFICO PARA PRODUCCI√ìN
// Ejecutar en la consola del navegador en https://tu-app.vercel.app

async function diagnosticarProduccion() {
  console.log('üîç DIAGN√ìSTICO DE PRODUCCI√ìN - CHAT IA')
  console.log('=' .repeat(60))
  
  // URLs de producci√≥n
  const PROD_API_URL = 'https://chat-for-company.onrender.com/api'
  const PROD_BACKEND = 'https://chat-for-company.onrender.com'
  
  console.log('üåê URLs de producci√≥n:')
  console.log('   Backend:', PROD_BACKEND)
  console.log('   API:', PROD_API_URL)
  console.log('')
  
  // 1. Verificar si el backend est√° vivo
  console.log('üíì Verificando si el backend est√° vivo...')
  try {
    const startTime = Date.now()
    const healthResponse = await fetch(`${PROD_BACKEND}/health`)
    const responseTime = Date.now() - startTime
    
    if (healthResponse.ok) {
      console.log('‚úÖ Backend responde:', healthResponse.status, `(${responseTime}ms)`)
    } else {
      console.error('‚ùå Backend con problemas:', healthResponse.status)
    }
  } catch (error) {
    console.error('‚ùå Backend no accesible:', error.message)
    console.error('üö® PROBLEMA CR√çTICO: El backend en Render est√° ca√≠do')
    return
  }
  
  // 2. Verificar configuraci√≥n de IA
  console.log('ü§ñ Verificando configuraci√≥n de IA en producci√≥n...')
  try {
    const token = localStorage.getItem('token')
    const diagnosticoResponse = await fetch(`${PROD_API_URL}/support/diagnostico`, {
      headers: token ? { 'Authorization': `Bearer ${token}` } : {}
    })
    
    if (diagnosticoResponse.ok) {
      const diagnosticoData = await diagnosticoResponse.json()
      console.log('üîç Diagn√≥stico del servidor en producci√≥n:')
      console.log('')
      console.log('   ÔøΩ DeepSeek API:')
      console.log('      ‚îú‚îÄ API Key presente:', diagnosticoData.data.deepseek.hasApiKey ? '‚úÖ S√ç' : '‚ùå NO')
      console.log('      ‚îú‚îÄ Longitud API Key:', diagnosticoData.data.deepseek.apiKeyLength || 'N/A')
      console.log('      ‚îú‚îÄ Modo demo activo:', diagnosticoData.data.deepseek.isDemoMode ? 'üé≠ S√ç' : '‚ö° NO')
      console.log('      ‚îî‚îÄ Primeros chars:', diagnosticoData.data.deepseek.firstChars || 'N/A')
      console.log('')
      console.log('   üñ•Ô∏è Servidor:')
      console.log('      ‚îú‚îÄ Ambiente:', diagnosticoData.data.environment)
      console.log('      ‚îú‚îÄ Uptime:', Math.round(diagnosticoData.data.server.uptime), 'segundos')
      console.log('      ‚îî‚îÄ Memoria:', Math.round(diagnosticoData.data.server.memory.used / 1024 / 1024), 'MB usados')
      
      // Diagn√≥stico autom√°tico
      if (!diagnosticoData.data.deepseek.hasApiKey) {
        console.log('')
        console.log('üö® PROBLEMA ENCONTRADO:')
        console.log('   La API key de DeepSeek NO est√° configurada en Render')
        console.log('   El sistema est√° funcionando en modo demo')
        console.log('')
        console.log('‚úÖ SOLUCI√ìN:')
        console.log('   1. Ve a render.com ‚Üí tu servicio ‚Üí Environment')
        console.log('   2. Agrega: DEEPSEEK_API_KEY = sk-ee83d3c6a94c4f77a6978d177c4c450d')
        console.log('   3. Redespliega el servicio')
      } else if (diagnosticoData.data.deepseek.isDemoMode) {
        console.log('')
        console.log('üö® PROBLEMA ENCONTRADO:')
        console.log('   La API key est√° presente pero es inv√°lida o hay errores')
        console.log('')
        console.log('‚úÖ SOLUCI√ìN:')
        console.log('   1. Verificar que la API key sea correcta')
        console.log('   2. Comprobar que DeepSeek est√© funcionando')
        console.log('   3. Revisar logs del servidor para errores espec√≠ficos')
      } else {
        console.log('')
        console.log('‚úÖ CONFIGURACI√ìN CORRECTA:')
        console.log('   DeepSeek est√° configurado y deber√≠a funcionar')
        console.log('   Si a√∫n hay problemas, revisar logs del servidor')
      }
      
    } else {
      console.error('‚ùå Error obteniendo diagn√≥stico:', diagnosticoResponse.status)
      console.error('   Puede que el endpoint no est√© disponible a√∫n')
    }
  } catch (error) {
    console.error('‚ùå Error en diagn√≥stico IA:', error.message)
    console.error('   Esto indica problemas de conectividad o configuraci√≥n')
  }
  
  // 3. Probar el endpoint de chat actualmente
  console.log('')
  console.log('ÔøΩ Probando chat de apoyo actual...')
  try {
    const token = localStorage.getItem('token')
    if (!token) {
      console.error('‚ùå No hay token de autenticaci√≥n en localStorage')
      console.log('   Necesitas hacer login primero')
      return
    }
    
    // Probar obtener chat activo
    const supportResponse = await fetch(`${PROD_API_URL}/support/active`, {
      headers: { 'Authorization': `Bearer ${token}` }
    })
    
    if (supportResponse.ok) {
      const data = await supportResponse.json()
      console.log('‚úÖ Chat de apoyo accesible')
      console.log('   Chat ID:', data.data?.chat?.id || 'N/A')
      console.log('   Mensajes:', data.data?.messages?.length || 0)
      
      // Probar env√≠o de mensaje de prueba
      if (data.data?.chat?.id) {
        console.log('')
        console.log('üì§ Enviando mensaje de prueba...')
        
        const testResponse = await fetch(`${PROD_API_URL}/support/${data.data.chat.id}/message`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify({ message: 'Test de diagn√≥stico - ¬øest√°s usando DeepSeek o modo demo?' })
        })
        
        if (testResponse.ok) {
          const testData = await testResponse.json()
          const response = testData.data?.assistantMessage?.content || ''
          
          if (response.includes('ALEXANDRA') && response.includes('especializada en gesti√≥n')) {
            console.log('üé≠ CONFIRMADO: Est√° en modo DEMO')
            console.log('   Respuesta t√≠pica de demo detectada')
          } else {
            console.log('‚ö° POSIBLE: Est√° usando DeepSeek')
            console.log('   Respuesta:', response.substring(0, 100) + '...')
          }
        } else {
          console.error('‚ùå Error enviando mensaje de prueba:', testResponse.status)
        }
      }
      
    } else {
      console.error('‚ùå Error accediendo al chat:', supportResponse.status)
      const errorText = await supportResponse.text()
      console.error('   Detalle:', errorText)
    }
    
  } catch (error) {
    console.error('‚ùå Error en prueba de chat:', error.message)
  }
  
  console.log('')
  console.log('üéØ RESUMEN EJECUTIVO:')
  console.log('   1. Si ves "API Key presente: ‚ùå NO" ‚Üí Configurar en Render')
  console.log('   2. Si ves "Modo demo activo: üé≠ S√ç" ‚Üí Hay problema con la API')
  console.log('   3. Si todo est√° ‚úÖ pero sigue en demo ‚Üí Revisar logs de Render')
  console.log('   4. Cualquier error de fetch ‚Üí Backend ca√≠do o CORS')
}

// Funci√≥n para ejecutar f√°cilmente
window.diagnosticarProduccion = diagnosticarProduccion

console.log('üîß Diagn√≥stico cargado. Ejecuta: diagnosticarProduccion()')
console.log('üìã O simplemente copia y pega toda esta funci√≥n en la consola')
